###
#
# This is the zabbix_core_precheck_secondary.yml playbook which is getting executed
# @host: Secondary_Core_Zabbix
# 
# @author: sai
# @date:
# @version: 1
#
###
   # - include_tasks: api.yml
 
   - setup:
   - name: Get Environment variable Admin_Root
     set_fact:
       Admin_Root: "{{lookup('env','Admin_Root') }}"
   - debug:
      msg: "{{Admin_Root}}"
  
# # including vars environment.yml   
#    - include_vars: "{{Admin_Root}}/Portal_Scripts/Bin/environment.yml"
#    - debug:
#        msg: This is Zabbix app server node named -  "{{ ansible_hostname }}"

# # saving the value of 'Primary_DB_Zabbix' to 'db_ip' variable   
#    - name: Print the name of DB node
#      set_fact:
#        db_ip: "{{ item }}" 
#      with_items:
#        - "{{ groups['Primary_DB_Zabbix'] }}"
#      register: db_ipa

# # saving the value of 'Primary_VIP_Zabbix' to 'VIP' variable     
  #  - set_fact:
  #      VIP: "{{ item }}"
  #    with_items:
  #      - "{{ groups['Primary_VIP_Zabbix'] }}"
  #    register: vip_ipa
  
#    - debug:
#        var: db_ipa.results    

# # creating folder structure for Zabbix App install   
#    - name: Create folder structure for Zabbix App install
#      file:
#        path: "{{Admin_Root}}/zabbix-env/Zabbix_Core_HA/"
#        state: directory

# # Copy the Zabbix  Pre-Check scripts for App install
#    - name: Copy the Zabbix  Pre-Check scripts for App install
#      copy:
#        src: "{{Admin_Root}}/Zabbix_Core_HA/"
#        dest: "{{Admin_Root}}/zabbix-env/Zabbix_Core_HA/"

# # Executing Zabbix_App_prereq.py for Zabbix Pre-Check App install
#    - name: Zabbix Pre-Check App install
#      command: python Zabbix_App_prereq.py "{{Environment}}"
#      args:
#        chdir: "{{Admin_Root}}/zabbix-env/Zabbix_Core_HA/Bin"

# Executing Zabbix_App_prereq.py for Zabbix Pre-Check App install
   - name: Zabbix Pre-Check App install
     command: python3.7 Zabbix_Core_Precheck.py "Secondary"
     args:
       chdir: "{{ansible_env.Admin_Root}}/zabbix/Bin/Pre_Check"

# Added this for rollback ---------------------------------
     register: result
     ignore_errors: yes

   - set_fact:
       pyresult: "3rr0rC0d3[00{{result.rc}}]"

   - debug:
       msg: "{{result.stdout_lines[0]}}"

   - set_fact:
       pyresult: "{{result.stdout_lines[0]}}"
     when: result.rc == 0




# # storing all files from output folder to a found_files variable
#    - name: Get files in a folder
#      find:
#        paths: "{{Admin_Root}}/zabbix-env/Zabbix_Core_HA/Output"
#      register: found_files

# # storing the latest output file name to 'latest_file' variable
#    - name: Get latest log file - App
#      set_fact:
#        latest_file: "{{ found_files.files | sort(attribute='mtime',reverse=true) | first }}" 

# # priting the latest output file name
#    - name: Print Lastest file name
#      debug:
#        var: latest_file.path

# # separating the latest output file's content with comma 
# # and storing the first column result to 'zabbiz_log' variable
#    - name: Read the latest log file - App
#      shell: cat {{ latest_file.path }} | awk 'BEGIN {FS = ","} ; {print $1}'
#      register: zabbiz_log

# # priting the 'zabbiz_log' variable value
#    - name: Displaying the status of Zabbix pre-requisites - App
#      debug:
#        var:   zabbiz_log.stdout_lines

# # copying the 'zabbiz_log' variable value to 'zabbix_pre_sec.result' file
#    - name: Saving the Zabbix test results - App
#      copy:
#        content: "{{ zabbiz_log.stdout_lines }}"
#        dest: "{{Admin_Root}}/zabbix-env/Zabbix_Core_HA/zabbix_pre_sec.result"
#        force: yes

# # creating a json string for zabbix_pre_sec.result and register in zabbix_pre_post
#    - name: Create a json string for status - App
#      shell: cat "{{Admin_Root}}/zabbix-env/Zabbix_Core_HA/zabbix_pre_sec.result" | tr -d '"' | tr -d '[' |tr -d ']'
#      register: zabbix_pre_post  

# # Storing the output of shell command in  zabbix_app_pf variable
#    - name: Validate the Zabbix App  precheck results
#      shell: cat "{{Admin_Root}}/zabbix-env/Zabbix_Core_HA/zabbix_pre_sec.result" | grep -i fail
#      register: zabbix_app_pf
#      failed_when: false

# # creating a file zabbix_app_p2 if not found 0 in zabbix_app_pf.rc (result check)
#    - name: Create a Marker in case of App precheck failures
#      file:
#        path: /tmp/cleanup/zabbix_app_p2
#        state: touch
#      delegate_to: localhost
#      when: zabbix_app_pf.rc != 0

#    - meta: end_play
#      when: zabbix_app_pf.rc != 0 

#    # - include_tasks: zabbix_secondary_install.yml
 
