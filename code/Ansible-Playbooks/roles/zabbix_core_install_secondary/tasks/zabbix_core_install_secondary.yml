###
#
# This is the zabbix_core_install_secondary.yml playbook which is getting executed
# @host: Secondary_Core_Zabbix
# 
# @author: sai
# @date:
# @version: 1
#
### 
# - include_tasks: api.yml
   - setup:
   - name: Get Environment variable Admin_Root
     set_fact:
       Admin_Root: "{{lookup('env','Admin_Root') }}"
   - debug:
      msg: "{{Admin_Root}}"
   
## saving the value of 'Primary_VIP_Zabbix' to 'VIP' variable
#   - set_fact:
#      VIP: "{{ item }}"
#     with_items:
##      - "{{ groups['Primary_VIP_Zabbix'] }}"
#
#   - debug:
#       msg: Zabbix DB precheck passed on "{{ ansible_hostname }}"
#   - debug:
#       msg: "{{db_ip}} {{VIP}}"



# including vars environment.yml
#   - include_vars: "{{Admin_Root}}/Portal_Scripts/Bin/environment.yml"

## saving the value of 'Primary_DB_Zabbix' to 'db_ip' variable
#    - name: Print the name of DB node
#      set_fact:
#        db_ip: "{{ item }}"
#      with_items:
#        - "{{ groups['Primary_DB_Zabbix'] }}"
   - command: python3.7 Zabbix_Install_Core.py "Secondary"
     args:
       chdir: "{{ ansible_env.Admin_Root }}/zabbix/Bin/Install"


# Added this for rollback ---------------------------------
     register: result
     ignore_errors: yes

   - set_fact:
       pyresult: "3rr0rC0d3[00{{result.rc}}]"

   - debug:
       msg: "{{result.stdout_lines[0]}}"

   - set_fact:
       pyresult: "{{result.stdout_lines[0]}}"
     when: result.rc == 0


# # Executing Zabbix_install_secondary_HA.py for Zabbix App install
#    - command: python Zabbix_install_secondary_HA_V5.0.py "{{ db_ip }}" "{{ VIP }}" "{{Environment}}"
#      args:
#        chdir: "{{Admin_Root}}/zabbix-env/Zabbix_Core_HA/Bin"

# # storing all files from output folder to a found_files variable
#    - name: Get files in a folder
#      find:
#        paths: "{{Admin_Root}}/zabbix-env/Zabbix_Core_HA/Output"
#      register: found_files

# # storing the latest output file name to 'latest_file' variable
#    - name: Get latest file
#      set_fact:
#        latest_file: "{{ found_files.files | sort(attribute='mtime',reverse=true) | first }}"

# # priting the latest output file name
#    - name: Print Lastest file name
#      debug:
#        var: latest_file.path

# # separating the latest output file's content with comma 
# # and storing the first column result to 'zabbiz_log' variable
#    - name: Read the latest log file
#      shell: cat {{ latest_file.path }} | awk 'BEGIN {FS = ","} ; {print $1}'
#      register: zabbiz_log

# # priting the 'zabbiz_log' variable value
#    - name: Displaying the status of Zabbix pre-requisites
#      debug:
#        var:   zabbiz_log.stdout_lines

# # copying the 'zabbiz_log' variable value to 'zabbix_pre.result' file
#    - name: Saving the Zabbix test results
#      copy:
#        content: "{{ zabbiz_log.stdout_lines }}"
#        dest: "{{Admin_Root}}/zabbix-env/Zabbix_Core_HA/zabbix_pre.result"
#        force: yes

# # creating a json string for zabbix_pre.result and register in zabbix_pre_post
#    - name: Create a json string for status
#      shell: cat "{{Admin_Root}}/zabbix-env/Zabbix_Core_HA/zabbix_pre.result" | tr -d '"' | tr -d '[' |tr -d ']'
#      register: zabbix_pre_post

# # Storing the output of shell command in  zabbix_app_ins variable
#    - name: Validate the Zabbix App Install results
#      shell: cat "{{Admin_Root}}/zabbix-env/Zabbix_Core_HA/zabbix_pre.result" | grep -i fail
#      failed_when: false
#      register: zabbix_app_ins
 
# # creating a file zabbix_app_c2 if found 0 in zabbix_app_ins.rc (result check)
#    - name: Create a Marker file in case of Zabbix App install failure  
#      file:
#        path: /tmp/cleanup/zabbix_app_c2
#        state: touch
#      delegate_to: localhost
#      when: zabbix_app_ins.rc == 0